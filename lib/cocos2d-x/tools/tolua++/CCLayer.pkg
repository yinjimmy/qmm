
typedef enum {
	kCCTouchesAllAtOnce,
	kCCTouchesOneByOne,
} ccTouchesMode;

class CCLayer : public CCNode
{
    void setTouchEnabled(bool bValue);
    bool isTouchEnabled();

    void setAccelerometerEnabled(bool bValue);
    bool isAccelerometerEnabled();

    void setKeypadEnabled(bool bValue);
    bool isKeypadEnabled();

    void setTouchMode(ccTouchesMode mode);
    int getTouchMode();
    void setTouchPriority(int priority);
    int getTouchPriority();

    void registerScriptTouchHandler(LUA_FUNCTION nHandler,
                                    bool bIsMultiTouches = false,
                                    int nPriority = 0,
                                    bool bSwallowsTouches = false);
    void unregisterScriptTouchHandler();

    void registerScriptKeypadHandler(LUA_FUNCTION nHandler);
    void unregisterScriptKeypadHandler(void);

    void registerScriptAccelerateHandler(LUA_FUNCTION nHandler);
    void unregisterScriptAccelerateHandler(void);

    static CCLayer *create(void);
};

class CCLayerRGBA : public CCLayer
{
    static CCLayerRGBA* create();

    void setColor(const ccColor3B& color);
    const ccColor3B& getColor(void);
    const ccColor3B& getDisplayedColor(void);
    GLubyte getDisplayedOpacity(void);
    GLubyte getOpacity(void);
    void setOpacity(GLubyte opacity);
    void setOpacityModifyRGB(bool bValue);
    bool isOpacityModifyRGB(void);
    bool isCascadeColorEnabled(void);
    void setCascadeColorEnabled(bool cascadeColorEnabled);
    void updateDisplayedColor(const ccColor3B& color);
    bool isCascadeOpacityEnabled(void);
    void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
    void updateDisplayedOpacity(GLubyte opacity);
};

class CCLayerColor : public CCLayerRGBA
{
    void changeWidth(GLfloat w);
    void changeHeight(GLfloat h);
    void changeWidthAndHeight(GLfloat w ,GLfloat h);

	void setContentSize(const CCSize & var);

    void setOpacity(GLubyte var);
    GLubyte getOpacity(void);
    void setColor(ccColor3B Value);
    ccColor3B getColor(void);
    void setBlendFunc(ccBlendFunc Value);
    ccBlendFunc getBlendFunc(void);

	void setOpacityModifyRGB(bool bValue);
    bool isOpacityModifyRGB(void);

    static CCLayerColor* create(ccColor4B color, GLfloat width, GLfloat height);
    static CCLayerColor* create(ccColor4B color);
};

class CCLayerGradient : public CCLayerColor
{
    void setStartColor(ccColor3B colors);
    ccColor3B getStartColor();
    void setEndColor(ccColor3B Value);
    ccColor3B getEndColor(void);
    void setStartOpacity(GLubyte Value);
    GLubyte getStartOpacity(void);
    void setEndOpacity(GLubyte Value);
    GLubyte getEndOpacity(void);
    void setVector(CCPoint Value);
    CCPoint getVector(void);

    void setCompressedInterpolation(bool Value);
    bool isCompressedInterpolation(void);

    static CCLayerGradient* create(ccColor4B start, ccColor4B end, CCPoint v);
    static CCLayerGradient* create(ccColor4B start, ccColor4B end);
    static CCLayerGradient* create();
};

class CCLayerMultiplex : public CCLayer
{
    void addLayer(CCLayer* layer);
    void switchTo(unsigned int n);
    void switchToAndReleaseMe(unsigned int n);

    static CCLayerMultiplex* createWithArray(CCArray* arrayOfLayers);
    static CCLayerMultiplex * create();
    static CCLayerMultiplex * createWithLayer(CCLayer* layer);
};
