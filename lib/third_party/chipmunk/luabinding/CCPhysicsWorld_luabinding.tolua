
$#include "CCPhysicsShape.h"
$#include "CCPhysicsBody.h"
$#include "CCPhysicsWorld.h"
$#include "CCPhysicsDebugNode.h"

class CCPhysicsWorld : public CCNode
{
    static CCPhysicsWorld *create(float gravityX, float gravityY);
    static CCPhysicsWorld *create(void);

    CCPhysicsDebugNode *createDebugNode(void);

    void getGravity(float *gravityX, float *gravityY);
    void setGravity(float gravityX, float gravityY);

    // add shapes to world
    CCPhysicsBody *createCircleBody(float mass, float radius, float offsetX = 0, float offsetY = 0);
    CCPhysicsBody *createBoxBody(float mass, float width, float height);
    CCPhysicsBody *createPolygonBody(float mass, CCPointArray *vertexes, float offsetX = 0, float offsetY = 0);
    CCPhysicsBody *createPolygonBody(float mass, LUA_TABLE vertexes, float offsetX = 0, float offsetY = 0);

    void addBody(CCPhysicsBody *body);
    CCPhysicsBody *getBodyByTag(int tag);
    void removeBodyByTag(int tag, bool unbind = true);
    void removeBody(CCPhysicsBody *body, bool unbind = true);
    void removeAllBodies(bool unbind = true);

    // operation
    void start(void);
    void stop(void);

    // events
    void addCollisionScriptListener(LUA_FUNCTION handler, int collisionTypeA, int collisionTypeB);
    void removeCollisionScriptListener(int collisionTypeA, int collisionTypeB);
    void removeAllCollisionListeners(void);
};

class CCPhysicsBody : public CCObject
{
    static CCPhysicsBody *defaultStaticBody(CCPhysicsWorld *world);
    static CCPhysicsBody *createStaticBody(CCPhysicsWorld *world);
    static CCPhysicsBody *create(CCPhysicsWorld *world, float mass, float moment);

    // extended properties
    const char *getName(void);
    void setName(const char *name);

    // body properties
    int getTag(void);
    void setTag(int tag);

    float getMass(void);
    void setMass(float mass);

    float getInertia(void);
    void setInertia(float inertia);

    CCPoint getVelocity(void);
    void getVelocity(float *velocityX, float *velocityY);
    void setVelocity(const CCPoint &velocity);
    void setVelocity(float velocityX, float velocityY);

    float getVelocityLimit(void);
    void setVelocityLimit(float limit);

    float getAngleVelocity(void);
    void setAngleVelocity(float velocity);

    float getAngleVelocityLimit(void);
    void setAngleVelocityLimit(float limit);

    CCPoint getForce(void);
    void getForce(float *forceX, float *forceY);
    void setForce(const CCPoint &force);
    void setForce(float forceX, float forceY);

    float getTorque(void);
    void setTorque(float force);

    CCPoint getPosition(void);
    void getPosition(float *x, float *y);
    void setPosition(const CCPoint &pos);
    void setPosition(float x, float y);

    float getAngle(void);
    void setAngle(float angle);

    float getRotation(void);
    void setRotation(float rotation);

    // shape properties
    float getElasticity(void);
    void setElasticity(float elasticity);
    float getFriction(void);
    void setFriction(float friction);
    bool isSensor(void);
    void setIsSensor(bool isSensor);
    int getCollisionType(void);
    void setCollisionType(int collisionType);

    // binding to node
    void bind(CCNode *node);
    void unbind(void);

    // shapes management
    CCPhysicsShape *addSegmentShape(const CCPoint lowerLeft, const CCPoint lowerRight, float thickness);
    CCPhysicsShape *addCircleShape(float radius, float offsetX = 0, float offsetY = 0);
    CCPhysicsShape *addBoxShape(float width, float height);
    CCPhysicsShape *addPolygonShape(CCPointArray *vertexes, float offsetX = 0, float offsetY = 0);
    CCPhysicsShape *addPolygonShape(int vertexes, float offsetX = 0, float offsetY = 0);

    void removeShapeAtIndex(int index);
    void removeShape(CCPhysicsShape *shapeObject);
    void removeAllShape(void);
};

class CCPhysicsShape : public CCObject
{
    float getElasticity(void);
    void setElasticity(float elasticity);

    float getFriction(void);
    void setFriction(float friction);

    bool isSensor(void);
    void setIsSensor(bool isSensor);

    int getCollisionType(void);
    void setCollisionType(int collisionType);
};

class CCPhysicsDebugNode : public CCNode
{
};

class CCPhysicsCollisionEvent : public CCObject
{
    CCPhysicsWorld *getWorld(void);

    CCPhysicsBody *getBody1(void);
    CCPhysicsBody *getBody2(void);

    bool isFirstContact(void);

    float getElasticity(void);
    void setElasticity(float elasticity);

    float getFriction(void);
    void setFriction(float friction);

    const CCPoint getSurfaceVelocities(void);
    void setSurfaceVelocities(const CCPoint velocities);

    void *getUserData(void);
    void setUserData(void *userdata);
};
